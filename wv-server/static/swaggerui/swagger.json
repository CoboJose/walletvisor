{
  "swagger": "2.0",
  "info": {
    "description": "WalletVisor Api Reference",
    "version": "1.0.0",
    "title": "Walletvisor",
    "contact": {
      "name": "Jose Cobo",
      "url": "https://github.com/CoboJose",
      "email": "cobogue@gmail.com"
    }
  },
  "host": "walletvisor.herokuapp.com",
  "basePath": "/v1",
  "tags": [
    {
      "name": "ping",
      "description": "Used to test if the server is operational"
    },
    {
      "name": "authorization",
      "description": "Methods for user authentication"
    },
    {
      "name": "user",
      "description": "User Operations"
    },
    {
      "name": "transaction",
      "description": "Transaction Operations"
    },
    {
      "name": "group",
      "description": "Group Operations"
    },
    {
      "name": "groupInvitation",
      "description": "Group Invitation Operations"
    },
    {
      "name": "groupTransaction",
      "description": "Group Transaction Operations"
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/ping": {
      "get": {
        "tags": [
          "ping"
        ],
        "summary": "Test if the server is operational",
        "description": "",
        "operationId": "ping",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "type": "string",
              "example": "pong"
            }
          },
          "503": {
            "description": "The server is not operational"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "authorization"
        ],
        "summary": "Log in the user",
        "description": "",
        "operationId": "login",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Data required to log in a user",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "format": "email",
                  "example": "example@email.com"
                },
                "password": {
                  "type": "string",
                  "format": "password",
                  "example": "C0mplexPa$$"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/AuthResponse"
            }
          },
          "400": {
            "description": "ErrorResponse object containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/auth/signup": {
      "post": {
        "tags": [
          "authorization"
        ],
        "summary": "Create a new User",
        "description": "",
        "operationId": "signup",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Data required to log in a user",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "format": "email",
                  "example": "example@email.com"
                },
                "password": {
                  "type": "string",
                  "format": "password",
                  "example": "C0mplexPa$$"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/AuthResponse"
            }
          },
          "400": {
            "description": "ErrorResponse object containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/auth/refreshToken": {
      "get": {
        "tags": [
          "authorization"
        ],
        "summary": "Refresh the token",
        "description": "",
        "operationId": "refreshToken",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "refreshToken",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/AuthResponse"
            }
          },
          "400": {
            "description": "ErrorResponse object containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/user": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get the user information of the token user",
        "description": "",
        "operationId": "getUser",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "ErrorResponse object containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create a new User",
        "description": "",
        "operationId": "updateUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Data required to update a user",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "format": "email",
                  "example": "example@email.com"
                },
                "oldPassword": {
                  "type": "string",
                  "format": "password",
                  "example": "C0mplexPa$$"
                },
                "newPassword": {
                  "type": "string",
                  "format": "password",
                  "example": "C0mplexPa$$"
                },
                "name": {
                  "type": "string",
                  "example": "Jhon Doe"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "ErrorResponse object containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      }
    },
    "/transactions": {
      "get": {
        "tags": [
          "transaction"
        ],
        "summary": "Get the transactions made by the logged user in the time range provided",
        "description": "",
        "operationId": "getTransactions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "timestamp of the first transaction to fetch",
            "required": true,
            "type": "integer"
          },
          {
            "name": "to",
            "in": "query",
            "description": "timestamp of the last transaction to fetch",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/GetTransactionsResponse"
            }
          },
          "400": {
            "description": "ErrorResponse object containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      },
      "post": {
        "tags": [
          "transaction"
        ],
        "summary": "Create a new Transaction",
        "description": "",
        "operationId": "createTransaction",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Data required to create a transaction",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Transaction"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/Transaction"
            }
          },
          "400": {
            "description": "ErrorResponse object containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      },
      "put": {
        "tags": [
          "transaction"
        ],
        "summary": "Update a Transaction",
        "description": "",
        "operationId": "updateTransaction",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Data required to update a transaction",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Transaction"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/Transaction"
            }
          },
          "400": {
            "description": "ErrorResponse object containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      },
      "delete": {
        "tags": [
          "transaction"
        ],
        "summary": "Delete a Transaction",
        "description": "",
        "operationId": "deleteTransaction",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "transactionId",
            "in": "query",
            "description": "Id of the transaction to delete",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Operation",
            "schema": {
              "type": "string",
              "example": "Transaction deleted succesfully"
            }
          },
          "400": {
            "description": "ErrorResponse object containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      }
    },
    "/groups": {
      "get": {
        "tags": [
          "group"
        ],
        "summary": "Get the groups where the logged user is a member",
        "description": "",
        "operationId": "getGroups",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/GroupDTO"
            }
          },
          "400": {
            "description": "ErrorResponse object containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      },
      "post": {
        "tags": [
          "group"
        ],
        "summary": "Create a new Group",
        "description": "",
        "operationId": "createGroup",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Data required to create a group",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Group"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "400": {
            "description": "ErrorResponse object containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      },
      "put": {
        "tags": [
          "group"
        ],
        "summary": "Update a Group",
        "description": "",
        "operationId": "updateGroup",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Data required to update a group",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Group"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "400": {
            "description": "ErrorResponse object containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      },
      "delete": {
        "tags": [
          "group"
        ],
        "summary": "Delete a Group",
        "description": "",
        "operationId": "deleteGroup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "query",
            "description": "Id of the group to delete",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Operation",
            "schema": {
              "type": "string",
              "example": "Group deleted succesfully"
            }
          },
          "400": {
            "description": "ErrorResponse object containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      }
    },
    "/groups/removeuser": {
      "delete": {
        "tags": [
          "group"
        ],
        "summary": "Remove a user from the group",
        "description": "",
        "operationId": "removeUserFromGroup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "query",
            "description": "Id of the group",
            "required": true,
            "type": "integer"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "Id of the user",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Operation",
            "schema": {
              "type": "string",
              "example": "User removed succesfully"
            }
          },
          "400": {
            "description": "ErrorResponse object containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      }
    },
    "/groupinvitations/group": {
      "get": {
        "tags": [
          "groupInvitation"
        ],
        "summary": "Get the group invitations belonging to a group",
        "description": "",
        "operationId": "getGroupGroupInvitations",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "query",
            "description": "Id of the group",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GroupInvitationResponse"
              }
            }
          },
          "400": {
            "description": "ErrorResponse object containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      }
    },
    "/groupinvitations/user": {
      "get": {
        "tags": [
          "groupInvitation"
        ],
        "summary": "Get the group invitations belonging to a user",
        "description": "",
        "operationId": "getUserGroupInvitations",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GroupInvitationResponse"
              }
            }
          },
          "400": {
            "description": "ErrorResponse object containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      }
    },
    "/groupinvitations/join": {
      "post": {
        "tags": [
          "groupInvitation"
        ],
        "summary": "Join a Group",
        "description": "",
        "operationId": "joinGroup",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Data required to join a group",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GroupInvitation"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/GroupInvitation"
            }
          },
          "400": {
            "description": "ErrorResponse object containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      }
    },
    "/groupinvitations/create": {
      "post": {
        "tags": [
          "groupInvitation"
        ],
        "summary": "Create a Group Invitation",
        "description": "",
        "operationId": "createGroupInvitation",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Data required to create a group invitation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateGroupInvitationRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/GroupInvitation"
            }
          },
          "400": {
            "description": "ErrorResponse object containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      }
    },
    "/groupinvitations/delete": {
      "delete": {
        "tags": [
          "groupInvitation"
        ],
        "summary": "Delete a Group Invitation",
        "description": "",
        "operationId": "deleteGroupInvitation",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "groupInvitationId",
            "in": "query",
            "description": "Id of the group invitation to delete",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Operation",
            "schema": {
              "type": "string",
              "example": "Group Invitation deleted succesfully"
            }
          },
          "400": {
            "description": "ErrorResponse object containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      }
    },
    "/grouptransactions": {
      "get": {
        "tags": [
          "groupTransaction"
        ],
        "summary": "Get the groups where the logged user is a member",
        "description": "",
        "operationId": "getGroupTransactions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "query",
            "description": "Id of the group",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/GroupTransactionDTO"
            }
          },
          "400": {
            "description": "ErrorResponse object containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      },
      "post": {
        "tags": [
          "groupTransaction"
        ],
        "summary": "Create a new Group Transaction",
        "description": "Also create the transaction with the calculated amount for the creating user",
        "operationId": "createGroupTransaction",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Data required to create a group",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GroupTransaction"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/GroupTransactionDTO"
            }
          },
          "400": {
            "description": "ErrorResponse object containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      },
      "put": {
        "tags": [
          "groupTransaction"
        ],
        "summary": "Update a Group Transaction",
        "description": "Also update the created transactions",
        "operationId": "updateGroupTransaction",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Data required to update a group transaction",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GroupTransaction"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/GroupTransaction"
            }
          },
          "400": {
            "description": "ErrorResponse object containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      },
      "delete": {
        "tags": [
          "groupTransaction"
        ],
        "summary": "Delete a Group Transaction",
        "description": "Also delete the created transactions",
        "operationId": "deleteGroupTransaction",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "groupTransactionId",
            "in": "query",
            "description": "Id of the group transaction to delete",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Operation",
            "schema": {
              "type": "string",
              "example": "Group Transaction deleted succesfully"
            }
          },
          "400": {
            "description": "ErrorResponse object containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      }
    },
    "/grouptransactions/pay": {
      "post": {
        "tags": [
          "groupTransaction"
        ],
        "summary": "Pay a group Transaction",
        "description": "Also create a transaction for the paying user with the calculated amount",
        "operationId": "payGroupTransaction",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Data required to pay a group transaction",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GroupTransaction"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Operation",
            "schema": {
              "type": "string",
              "example": "Group Transaction payed succesfully"
            }
          },
          "400": {
            "description": "ErrorResponse object containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "token": {
      "type": "apiKey",
      "name": "token",
      "in": "header",
      "description": "Token that identifies the user and his role, provided by the authorization methods"
    }
  },
  "definitions": {
    "AuthResponse": {
      "type": "object",
      "required": [
        "refreshToken",
        "role",
        "token",
        "tokenExpiresInMinutes"
      ],
      "properties": {
        "refreshToken": {
          "type": "string",
          "description": "Used to get a new Token without login again",
          "example": "eyJhb...w5c"
        },
        "role": {
          "type": "string",
          "description": "For access permission. At the moment only user exists",
          "example": "eyJhb...w5c"
        },
        "token": {
          "type": "string",
          "description": "Used to identify and authorize the user making the request",
          "example": "eyJhb...w5c"
        },
        "tokenExpiresInMinutes": {
          "type": "integer",
          "description": "Number of minutes before the token expires",
          "example": 15
        }
      }
    },
    "User": {
      "type": "object",
      "required": [
        "id",
        "email",
        "password",
        "name",
        "role"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "example": "1"
        },
        "email": {
          "type": "string",
          "format": "email",
          "example": "example@email.com"
        },
        "password": {
          "type": "string",
          "format": "password",
          "example": "C0mplexPa$$"
        },
        "name": {
          "type": "string",
          "example": "Jhon Doe"
        },
        "role": {
          "type": "string",
          "example": "user"
        }
      }
    },
    "Transaction": {
      "type": "object",
      "required": [
        "id",
        "name",
        "kind",
        "category",
        "amount",
        "date"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "example": "1"
        },
        "name": {
          "type": "string",
          "example": "October Salary"
        },
        "kind": {
          "$ref": "#/definitions/Kinds"
        },
        "category": {
          "$ref": "#/definitions/Categories"
        },
        "amount": {
          "type": "number",
          "example": 1200.5,
          "minimum": 0
        },
        "date": {
          "type": "integer",
          "description": "Timestamp",
          "example": 1625097600
        },
        "userId": {
          "type": "integer",
          "description": "The ID of the user who created the transaction",
          "example": 1
        },
        "groupTransactionID": {
          "type": "integer",
          "description": "The ID of the group transaction that created this transaction (If exist)",
          "example": null
        }
      }
    },
    "Categories": {
      "type": "string",
      "enum": [
        "salary",
        "business",
        "loan",
        "gifts",
        "food",
        "home",
        "shopping",
        "transport",
        "bills",
        "leisure",
        "health",
        "education",
        "groceries",
        "sport",
        "other"
      ]
    },
    "Kinds": {
      "type": "string",
      "enum": [
        "income",
        "expense"
      ]
    },
    "GetTransactionsResponse": {
      "type": "object",
      "properties": {
        "transactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Transaction"
          }
        },
        "totalBalance": {
          "type": "number",
          "example": 100.5
        }
      }
    },
    "Group": {
      "required": [
        "id",
        "name",
        "color"
      ],
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 1
        },
        "name": {
          "type": "string",
          "example": "Group 1"
        },
        "color": {
          "type": "string",
          "example": "#4287f5"
        }
      }
    },
    "GroupDTO": {
      "type": "object",
      "properties": {
        "group": {
          "$ref": "#/definitions/Group"
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        },
        "balance": {
          "type": "number",
          "example": 100.5
        }
      }
    },
    "GroupInvitation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 1
        },
        "invitedUserId": {
          "type": "integer",
          "example": 2
        },
        "inviterUserId": {
          "type": "integer",
          "example": 1
        },
        "groupId": {
          "type": "integer",
          "example": 1
        }
      }
    },
    "GroupInvitationResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 1
        },
        "invitedUserId": {
          "type": "integer",
          "example": 2
        },
        "invitedUserEmail": {
          "type": "string",
          "example": "user2@test.com"
        },
        "invitedUserName": {
          "type": "string",
          "example": "user2"
        },
        "inviterUserId": {
          "type": "integer",
          "example": 1
        },
        "inviterUserEmail": {
          "type": "string",
          "example": "user1@test.com"
        },
        "inviterUserName": {
          "type": "string",
          "example": "user1"
        },
        "groupId": {
          "type": "integer",
          "example": 1
        },
        "groupName": {
          "type": "string",
          "example": "Group Name"
        }
      }
    },
    "CreateGroupInvitationRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "user2@test.com"
        },
        "groupId": {
          "type": "integer",
          "example": 1
        }
      }
    },
    "GroupTransaction": {
      "type": "object",
      "required": [
        "id",
        "name",
        "kind",
        "category",
        "amount",
        "date"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "example": "1"
        },
        "name": {
          "type": "string",
          "example": "Tuesday Cinema"
        },
        "kind": {
          "$ref": "#/definitions/Kinds"
        },
        "category": {
          "$ref": "#/definitions/Categories"
        },
        "amount": {
          "type": "number",
          "example": 1200.5,
          "minimum": 0
        },
        "date": {
          "type": "integer",
          "description": "Timestamp",
          "example": 1625097600
        },
        "groupId": {
          "type": "integer",
          "description": "The ID of the belonging group",
          "example": 1
        }
      }
    },
    "GroupTransactionUsersDTO": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/User"
        },
        "isCreator": {
          "type": "boolean",
          "example": true
        },
        "hasPayed": {
          "type": "boolean",
          "example": false
        }
      }
    },
    "GroupTransactionDTO": {
      "type": "object",
      "properties": {
        "groupTransaction": {
          "$ref": "#/definitions/GroupTransaction"
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GroupTransactionUsersDTO"
          }
        },
        "isActive": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "ErrorResponse": {
      "type": "object",
      "description": "Error Codes Definitions: githubRepository/wv-server/utils/error_util.go or contact the creator of this documentation",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "string",
          "description": "Unique Code that identifies the error",
          "example": "GE002"
        },
        "debugMessage": {
          "type": "string",
          "description": "The Server internal error. It is only returned in development enviroments, not in production",
          "example": ""
        },
        "message": {
          "type": "string",
          "description": "The translated message from the code above, used if the API user has not a dictionary for the errors",
          "example": "Incorrect payload"
        }
      }
    }
  },
  "externalDocs": {
    "description": "GitHub Repository",
    "url": "https://github.com/CoboJose/walletvisor"
  }
}