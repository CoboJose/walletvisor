{
  "swagger": "2.0",
  "info": {
    "description": "WalletVisor Api Reference",
    "version": "1.0.0",
    "title": "Walletvisor",
    "contact": {
      "name": "Jose Cobo",
      "url": "https://github.com/CoboJose",
      "email": "cobogue@gmail.com"
    }
  },
  "host": "walletvisor.herokuapp.com",
  "basePath": "/v1",
  "tags": [
    {
      "name": "ping",
      "description": "Used to test if the server is operational"
    },
    {
      "name": "authorization",
      "description": "Methods for user authentication"
    },
    {
      "name": "user",
      "description": "User Operations"
    },
    {
      "name": "transaction",
      "description": "Transaction Operations"
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/ping": {
      "get": {
        "tags": [
          "ping"
        ],
        "summary": "Test if the server is operational",
        "description": "",
        "operationId": "ping",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "type": "string",
              "example": "pong"
            }
          },
          "503": {
            "description": "The server is not operational"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "authorization"
        ],
        "summary": "Log in the user",
        "description": "",
        "operationId": "login",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Data required to log in a user",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "format": "email",
                  "example": "example@email.com"
                },
                "password": {
                  "type": "string",
                  "format": "password",
                  "example": "C0mplexPa$$"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/AuthResponse"
            }
          },
          "400": {
            "description": "ErrorResponse object containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/auth/signup": {
      "post": {
        "tags": [
          "authorization"
        ],
        "summary": "Create a new User",
        "description": "",
        "operationId": "signup",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Data required to log in a user",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "format": "email",
                  "example": "example@email.com"
                },
                "password": {
                  "type": "string",
                  "format": "password",
                  "example": "C0mplexPa$$"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/AuthResponse"
            }
          },
          "400": {
            "description": "ErrorResponse object containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/auth/refreshToken": {
      "get": {
        "tags": [
          "authorization"
        ],
        "summary": "Refresh the token",
        "description": "",
        "operationId": "refreshToken",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "refreshToken",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/AuthResponse"
            }
          },
          "400": {
            "description": "ErrorResponse object containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/auth/deleteAccount": {
      "delete": {
        "tags": [
          "authorization"
        ],
        "summary": "Deletes the account of the user idetified by the token",
        "description": "",
        "operationId": "deleteAccount",
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Successful Operation",
            "schema": {
              "type": "string",
              "example": "Account deleted succesfully"
            }
          },
          "400": {
            "description": "ErrorResponse object containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      }
    },
    "/user": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get the user information of the token user",
        "description": "",
        "operationId": "getUser",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "ErrorResponse object containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create a new User",
        "description": "",
        "operationId": "updateUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Data required to update a user",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "format": "email",
                  "example": "example@email.com"
                },
                "oldPassword": {
                  "type": "string",
                  "format": "password",
                  "example": "C0mplexPa$$"
                },
                "newPassword": {
                  "type": "string",
                  "format": "password",
                  "example": "C0mplexPa$$"
                },
                "name": {
                  "type": "string",
                  "example": "Jhon Doe"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "ErrorResponse object containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      }
    },
    "/transactions": {
      "get": {
        "tags": [
          "transaction"
        ],
        "summary": "Get the transactions made by the logged user in the time range provided",
        "description": "",
        "operationId": "getTransactions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "timestamp of the first transaction to fetch",
            "required": true,
            "type": "integer"
          },
          {
            "name": "to",
            "in": "query",
            "description": "timestamp of the last transaction to fetch",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "ErrorResponse object containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      },
      "post": {
        "tags": [
          "transaction"
        ],
        "summary": "Create a new Transaction",
        "description": "",
        "operationId": "createTransaction",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Data required to create a transaction",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "October Salary"
                },
                "kind": {
                  "type": "string",
                  "example": "income"
                },
                "category": {
                  "type": "string",
                  "example": "salary"
                },
                "amount": {
                  "type": "number",
                  "example": 1250.5
                },
                "date": {
                  "type": "integer",
                  "format": "timestamp",
                  "example": 1625097600
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/Transaction"
            }
          },
          "400": {
            "description": "ErrorResponse object containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      },
      "put": {
        "tags": [
          "transaction"
        ],
        "summary": "Update a Transaction",
        "description": "",
        "operationId": "updateTransaction",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Data required to update a transaction",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "example": 1
                },
                "name": {
                  "type": "string",
                  "example": "October Salary"
                },
                "kind": {
                  "type": "string",
                  "example": "income"
                },
                "category": {
                  "type": "string",
                  "example": "salary"
                },
                "amount": {
                  "type": "number",
                  "example": 1250.5
                },
                "date": {
                  "type": "integer",
                  "format": "timestamp",
                  "example": 1625097600
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/Transaction"
            }
          },
          "400": {
            "description": "ErrorResponse object containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      },
      "delete": {
        "tags": [
          "transaction"
        ],
        "summary": "Delete a Transaction",
        "description": "",
        "operationId": "deleteTransaction",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "transactionId",
            "in": "query",
            "description": "Id of the transaction to delete",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Operation",
            "schema": {
              "type": "string",
              "example": "Transaction deleted succesfully"
            }
          },
          "400": {
            "description": "ErrorResponse object containing the cause of the error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "token": {
      "type": "apiKey",
      "name": "token",
      "in": "header",
      "description": "Token that identifies the user and his role, provided by the authorization methods"
    }
  },
  "definitions": {
    "AuthResponse": {
      "type": "object",
      "required": [
        "refreshToken",
        "role",
        "token",
        "tokenExpiresInMinutes"
      ],
      "properties": {
        "refreshToken": {
          "type": "string",
          "description": "Used to get a new Token without login again",
          "example": "eyJhb...w5c"
        },
        "role": {
          "type": "string",
          "description": "For access permission. At the moment only user exists",
          "example": "eyJhb...w5c"
        },
        "token": {
          "type": "string",
          "description": "Used to identify and authorize the user making the request",
          "example": "eyJhb...w5c"
        },
        "tokenExpiresInMinutes": {
          "type": "integer",
          "description": "Number of minutes before the token expires",
          "example": 15
        }
      }
    },
    "User": {
      "type": "object",
      "required": [
        "id",
        "email",
        "password",
        "name",
        "role"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "example": "1"
        },
        "email": {
          "type": "string",
          "format": "email",
          "example": "example@email.com"
        },
        "password": {
          "type": "string",
          "format": "password",
          "example": "C0mplexPa$$"
        },
        "name": {
          "type": "string",
          "example": "Jhon Doe"
        },
        "role": {
          "type": "string",
          "example": "user"
        }
      }
    },
    "Transaction": {
      "type": "object",
      "required": [
        "id",
        "name",
        "kind",
        "category",
        "amount"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "example": "1"
        },
        "name": {
          "type": "string",
          "example": "October Salary"
        },
        "kind": {
          "type": "string",
          "example": "income",
          "enum": [
            "income",
            "expense"
          ]
        },
        "category": {
          "type": "string",
          "example": "salary",
          "enum": [
            "salary",
            "business",
            "gifts",
            "food",
            "home",
            "shopping",
            "transport",
            "bills",
            "entertainment",
            "other"
          ]
        },
        "amount": {
          "type": "number",
          "example": 1200.5,
          "minimum": 0
        },
        "date": {
          "type": "integer",
          "description": "Timestamp",
          "example": 1625097600
        },
        "userId": {
          "type": "integer",
          "description": "The ID of the user who created the transaction",
          "example": 1
        }
      }
    },
    "ErrorResponse": {
      "type": "object",
      "description": "Error Codes Definitions: githubRepository/wv-server/utils/error_util.go or contact the creator of this documentation",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "string",
          "description": "Unique Code that identifies the error",
          "example": "GE002"
        },
        "debugMessage": {
          "type": "string",
          "description": "The Server internal error. It is only returned in development enviroments, not in production",
          "example": ""
        },
        "message": {
          "type": "string",
          "description": "The translated message from the code above, used if the API user has not a dictionary for the errors",
          "example": "Incorrect payload"
        }
      }
    }
  },
  "externalDocs": {
    "description": "GitHub Repository",
    "url": "https://github.com/CoboJose/walletvisor"
  }
}